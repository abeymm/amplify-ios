# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

# 1. A model with implicit default PK (`id`)

type ModelImplicitDefaultPk @model {
    name: String
}

# 2. A model with explicit use of the default PK (`id`)

type ModelExplicitDefaultPk @model {
  id: ID! @primaryKey
  name: String
}

# 3. A Model with explicit PK (`userId`)

type ModelExplicitCustomPk @model {
  userId: ID! @primaryKey
  name: String
}

# 4. A Model with a composite PK (`id` and `dob`)

type ModelCompositePk @model {
  id: ID! @primaryKey(sortKeyFields: ["dob"])
  dob: AWSDateTime!
  name: String
}

# 5. A Model with a composite PK (`id`, `location`, `name`)

type ModelCompositeMultiplePk @model {
  id: ID! @primaryKey(sortKeyFields: ["location", "name"])
  location: String!
  name: String!
  lastName: String
}

# 6. A Model with an Int for a composite PK (`serial` of type Int)

type ModelCompositeIntPk @model {
  id: ID! @primaryKey(sortKeyFields: ["serial"])
  serial: Int!
}

# 7. A Has-Many/Belongs-To relationship, each with a composite key
# Post with `id` and `title`, Comment with `id` and `content`

type PostWithCompositeKey @model {
  id: ID! @primaryKey(sortKeyFields: ["title"])
  title: String!
  comments: [CommentWithCompositeKey] @hasMany
}

type CommentWithCompositeKey @model {
  id: ID! @primaryKey(sortKeyFields: ["content"])
  content: String!
  post: PostWithCompositeKey @belongsTo
}

# 8. A Many-To-Many relationship, each with a composite key
# Post with `id` and `title`, Tag with `id` and `name`

type PostWithTagsCompositeKey @model {
  postId: ID! @primaryKey(sortKeyFields: ["title"])
  title: String!
  tags: [TagWithCompositeKey] @manyToMany(relationName: "PostTagsWithCompositeKey")
}

type TagWithCompositeKey @model {
  id: ID! @primaryKey(sortKeyFields: ["name"])
  name: String!
  posts: [PostWithTagsCompositeKey] @manyToMany(relationName: "PostTagsWithCompositeKey")
}

# 9. A Has-Many/Belongs-To relationship, with index
# Post with `id` and `title`, Comment with `id`, `content`, and index on `postID` and `postTitle`

type PostWithCompositeKeyAndIndex @model {
  id: ID! @primaryKey(sortKeyFields: ["title"])
  title: String!
  comments: [CommentWithCompositeKeyAndIndex] @hasMany
}

type CommentWithCompositeKeyAndIndex @model {
  id: ID! @primaryKey(sortKeyFields: ["content"])
  content: String!
  postID: ID @index(name: "byPost", sortKeyFields: ["postTitle"])
  postTitle: String
  post: PostWithCompositeKeyAndIndex @belongsTo(fields: ["postID", "postTitle"])
}
